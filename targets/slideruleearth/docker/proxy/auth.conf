access_by_lua_block {
    local opts = {
        redirect_uri = "/redirect_uri/",
        discovery = "https://ps.$DOMAIN/api/oauth2/.well-known/openid-configuration/",
        client_id = "$CLIENT_ID",
        client_secret = "$CLIENT_SECRET",
        scope = "openid memberships",
        redirect_uri_scheme = "$REDIRECT_URI_SCHEME",
        logout_path = "/logout",
        use_pkce = true,
    }

    -- call authenticate for OpenID Connect user authentication
    local res, err = require("resty.openidc").authenticate(opts)

    if err then
        ngx.status = 500
        ngx.say(err)
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    end

    -- at this point res is a Lua table with 3 keys:
    --   id_token    : a Lua table with the claims from the id_token (required)
    --   access_token: the access token (optional)
    --   user        : a Lua table with the claims returned from the user info endpoint (optional)

    -- set headers with user info: this will overwrite any existing headers
    -- but also scrub(!) them in case no value is provided in the token
    ngx.req.set_header("X-USER", res.id_token.sub)
}
