global
#  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
#  log stdout format raw local0 warning
  lua-load /usr/local/etc/haproxy/orchestrator.lua

defaults
  mode http
  timeout client 10s
  timeout connect 5s
  timeout server 600s
  timeout http-request 10s
  log global

#frontend stats
#  bind *:8404
#  stats enable
#  stats uri /
#  stats refresh 10s

frontend user
  bind :80
.if streq("$DOMAIN",slideruleearth.io)
  bind :443 ssl crt /etc/ssl/private/slideruleearth.io.pem
.elif streq("$DOMAIN",testsliderule.org)
  bind :443 ssl crt /etc/ssl/private/testsliderule.org.pem
.endif
  # rate limiting
  http-request lua.orchestrator_ratelimit
  http-request return status 429 hdr retry-after %[var(txn.retry_after)] content-type "text/plain" string "Your request has been rate limited, please reach out to support@mail.slideruleearth.io for possible use of a private cluster" if { var(txn.block_this_ip) -m bool }
  # cors
  http-response add-header Access-Control-Allow-Origin "*"
  http-response add-header Access-Control-Allow-Headers "*"
  http-response add-header Access-Control-Max-Age 3600
  http-response add-header Access-Control-Allow-Methods "GET, OPTIONS, POST"
  # backends
  acl is_options method OPTIONS
  use_backend preflight_backend if is_options
  use_backend cluster if { path_beg /source/ } or { path_beg /arrow/ }
  use_backend ilb_backend if { path_beg /discovery/ }
  use_backend monitor_backend if { path_beg /grafana/ } or { path /redirect_uri/ }
  use_backend manager_backend if { path_beg /manager/status } or { path_beg /manager/db }

frontend orchestrator
  bind :8050
  http-request use-service lua.orchestrator_register if { path /discovery/register }
  http-request use-service lua.orchestrator_selflock if { path /discovery/selflock }
  http-request use-service lua.orchestrator_lock if { path /discovery/lock }
  http-request use-service lua.orchestrator_unlock if { path /discovery/unlock }
  http-request use-service lua.orchestrator_status if { path /discovery/status }
  http-request use-service lua.orchestrator_prometheus if { path /discovery/prometheus }
  http-request use-service lua.orchestrator_health if { path /discovery/health }
  http-request use-service lua.orchestrator_block if { path /discovery/block }

backend cluster
.if !streq("$IS_PUBLIC",True)
  # start bearer token authentication
  http-request deny content-type 'text/html' string 'Missing Authorization HTTP header' unless { req.hdr(authorization) -m found }
  http-request set-var(txn.bearer) http_auth_bearer
  http-request set-var(txn.jwt_alg) var(txn.bearer),jwt_header_query('$.alg')
  http-request set-var(txn.token_type) http_auth_bearer,jwt_payload_query('$.token_type')
  http-request set-var(txn.org_name) var(txn.bearer),jwt_payload_query('$.org_name')
  http-request set-var(txn.exp) var(txn.bearer),jwt_payload_query('$.exp','int')
  http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm'  unless { var(txn.jwt_alg) -m str HS256 }
  http-request deny content-type 'text/html' string 'Invalid JWT type'  unless { var(txn.token_type) -m str access }
  http-request deny content-type 'text/html' string 'Invalid JWT organization'  unless { var(txn.org_name) -m str "$ORGANIZATION" }
  http-request deny content-type 'text/html' string 'Invalid JWT signature'  unless { var(txn.bearer),jwt_verify(txn.jwt_alg,"$OAUTH_HMAC_SECRET") -m int 1 }
  http-request set-var(txn.now) date()
  http-request deny content-type 'text/html' string 'JWT has expired' if { var(txn.exp),sub(txn.now) -m int lt 0 }
  # end bearer token authentication
.endif
  http-request set-var(txn.server_address) lua.next_node("sliderule")
  http-request set-dst var(txn.server_address),lua.extract_ip
  http-request set-dst-port var(txn.server_address),lua.extract_port
  option forwardfor
  server any 0.0.0.0:0

backend ilb_backend
  http-request use-service lua.orchestrator_status if { path /discovery/status }

backend monitor_backend
  server monitor 10.0.1.4:8080

backend manager_backend
  server manager 10.0.1.3:8000

backend preflight_backend
  http-after-response set-header Access-Control-Allow-Origin "*"
  http-after-response set-header Access-Control-Allow-Headers "*"
  http-after-response set-header Access-Control-Max-Age 3600
  http-request return status 200
