FROM amazonlinux:2023

# install build dependencies
RUN dnf update \
  && dnf groupinstall -y "Development Tools" \
  && dnf install -y \
  cmake \
  readline-devel \
  lua-devel \
  openssl-devel \
  libuuid-devel \
  libtiff-devel \
  sqlite-devel \
  curl-devel \
  python-devel \
  jq \
  meson \
  llvm \
  clang \
  clang-tools-extra \
  cppcheck \
  && dnf clean all \
  && rm -rf /var/cache/yum

# set working directory to root
WORKDIR /

# install rapidjson dependency
RUN git clone https://github.com/Tencent/rapidjson.git && \
    cd rapidjson && \
    #    VERSION=`curl -s https://api.github.com/repos/Tencent/rapidjson/releases/latest | jq '.tag_name' | tr -d "\""` && \
    #    git checkout $VERSION && \    ### version v1.1.0 (latest as of 8/25/16) is broken with recent compilers
    mkdir -p /build/rapidjson && \
    cd /build/rapidjson && \
    cmake /rapidjson && \
    make -j8 && \
    make install && \
    ldconfig

# install arrow dependency
RUN git clone https://github.com/apache/arrow.git && \
    cd arrow && \
    #    VERSION=`git describe --tags --abbrev=0` && \  ### arrow does not have releases, only tags
    #    git checkout $VERSION && \                     ### and often the latest tagged versions are not stable (e.g. *.dev tags)
    git checkout apache-arrow-19.0.1 && \
    mkdir -p /build/arrow && \
    cd /build/arrow && \
    cmake /arrow/cpp -DARROW_PARQUET=ON -DARROW_WITH_ZLIB=ON -DARROW_WITH_SNAPPY=ON -D ARROW_CSV=ON -DARROW_FILESYSTEM=ON && \
    make -j8 && \
    make install && \
    ldconfig

# install proj9 (gdal) dependency
RUN git clone https://github.com/OSGeo/PROJ.git && \
    cd PROJ && \
    VERSION=`curl -s https://api.github.com/repos/OSGeo/PROJ/releases/latest | jq '.tag_name' | tr -d "\""` && \
    git checkout $VERSION && \
    mkdir -p /build/proj && \
    cd /build/proj && \
    cmake /PROJ -DCMAKE_BUILD_TYPE=Release && \
    make -j8 && \
    make install && \
    ldconfig

# install geotiff (gdal) dependency
RUN git clone https://github.com/OSGeo/libgeotiff.git && \
    cd libgeotiff && \
    VERSION=`curl -s https://api.github.com/repos/OSGeo/libgeotiff/releases/latest | jq '.tag_name' | tr -d "\""` && \
    git checkout $VERSION && \
    mkdir -p /build/geotiff && \
    cd /build/geotiff && \
    cmake /libgeotiff/libgeotiff -DCMAKE_BUILD_TYPE=Release && \
    make -j8 && \
    make install && \
    ldconfig

# install geos (gdal) dependency
RUN git clone https://github.com/libgeos/geos.git && \
    cd geos && \
    VERSION=`curl -s https://api.github.com/repos/libgeos/geos/releases/latest | jq '.tag_name' | tr -d "\""` && \
    git checkout $VERSION && \
    mkdir -p /build/geos && \
    cd /build/geos && \
    cmake /geos -DCMAKE_BUILD_TYPE=Release && \
    make -j8 && \
    make install && \
    ldconfig

    # install libaec (required by HDF5 for SZIP support)
    # use known good version, there is no release tag to query programatically
RUN git clone https://gitlab.dkrz.de/k202009/libaec.git && \
    cd libaec && \
    git checkout v1.0.6 && \
    mkdir -p /build/libaec && \
    cd /build/libaec && \
    cmake /libaec -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON && \
    make -j8 && \
    make install && \
    ldconfig

    # install hdf5 (for gdal support)
    # disable high-level library API and enable thread safety (we need it for Sliderule)
RUN git clone https://github.com/HDFGroup/hdf5.git && \
    cd hdf5 && \
    HDF5_VERSION=`curl -s https://api.github.com/repos/HDFGroup/hdf5/releases/latest | jq '.tag_name' | tr -d "\""` && \
    git checkout $HDF5_VERSION && \
    HDF5_INSTALL_DIR=/usr/local/HDF_Group/HDF5/$HDF5_VERSION && \
    mkdir -p /build/hdf5 && \
    cd /build/hdf5 && \
    cmake /hdf5 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DHDF5_BUILD_HL_LIB=OFF -DHDF5_BUILD_CPP_LIB=OFF -DHDF5_ENABLE_THREADSAFE=ON -DCMAKE_INSTALL_PREFIX=$HDF5_INSTALL_DIR && \
    make -j8 && \
    make install && \
    echo "/usr/local/HDF_Group/HDF5/${HDF5_VERSION}/lib" > /etc/ld.so.conf.d/hdf5.conf && \
    ldconfig

# install gdal dependency
RUN git clone https://github.com/OSGeo/gdal.git && \
    cd gdal && \
    VERSION=`curl -s https://api.github.com/repos/OSGeo/gdal/releases/latest | jq '.tag_name' | tr -d "\""` && \
    git checkout $VERSION && \
    mkdir -p /build/gdal && \
    cd /build/gdal && \
    cmake /gdal -DCMAKE_BUILD_TYPE=Release -DBUILD_APPS=OFF -DGDAL_USE_SWIG:BOOL=OFF -DBUILD_PYTHON_BINDINGS:BOOL=OFF \
          -DGDAL_USE_HDF5=ON \
          -DGDAL_ENABLE_HDF5_GLOBAL_LOCK=OFF \
          -DHDF5_INCLUDE_DIR=$HDF5_INSTALL_DIR/include  \
          -DHDF5_LIBRARY=$HDF5_INSTALL_DIR/lib/libhdf5.so \
          -DHDF5_HL_LIBRARY=$HDF5_INSTALL_DIR/lib/libhdf5_hl.so \
          -DCMAKE_PREFIX_PATH=$HDF5_INSTALL_DIR && \
    make -j8 && \
    make install && \
    ldconfig

# configure any new shared libraries
RUN echo "/usr/local/lib64" > /etc/ld.so.conf.d/local.conf && ldconfig

# support interactive mode
WORKDIR /
CMD ["/bin/bash"]


